{"version":3,"sources":["components/Navbar.js","components/Bananas.js","components/Kiwis.js","components/Oranges.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","className","to","Bananas","src","alt","Kiwis","Oranges","App","path","component","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8QAmBeA,EAhBA,SAACC,GAEZ,OACI,yBAAKC,UAAU,6BACX,yBAAKA,UAAU,aACX,uBAAGA,UAAU,cAAa,0EAC1B,wBAAIA,UAAU,MACV,4BAAI,kBAAC,IAAD,CAAMC,GAAG,YAAT,gBACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,UAAT,aACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,YAAT,qBCCTC,EAXC,WAGZ,OACI,yBAAKF,UAAU,QACX,wBAAIA,UAAU,UAAd,oBACA,yBAAKG,IAAI,sIAAsIC,IAAI,OCgBhJC,EAtBD,WAGV,OACI,yBAAKL,UAAU,UACX,+CACA,yBAAKG,IAAI,uEAAuEC,IAAI,KACpF,4BACI,wEACA,8CACA,0CACA,4CACA,0DACA,+CACA,qEACA,iDCLDE,EAVC,SAACP,GACb,OACI,yBAAKC,UAAU,WACX,uDACA,yBAAKG,IAAI,gGAAgGC,IAAI,OCmB1GG,E,uKAfb,OACE,kBAAC,IAAD,KACA,yBAAKP,UAAU,OACb,kBAAC,EAAD,MACD,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOQ,KAAK,WAAWC,UAAWP,IAClC,kBAAC,IAAD,CAAOM,KAAK,SAASC,UAAWJ,IAChC,kBAAC,IAAD,CAAOG,KAAK,WAAWC,UAAWH,W,GATvBI,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d13dbbd6.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst Navbar = (props) => {\r\n\r\n    return (\r\n        <nav className='nav-wrapper blue darken-3'>\r\n            <div className='container'>\r\n                <a className='brand-logo'><b>Click The Links For Fun Facts About Fruits</b></a>\r\n                <ul className='yo'>\r\n                    <li><Link to='/Bananas'>Banana Time</Link></li>\r\n                    <li><Link to='/Kiwis'>Kiwi Day</Link></li>\r\n                    <li><Link to='/Oranges'>Orange Power</Link></li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar","import React from 'react'\r\n\r\nconst Bananas = () => {\r\n\r\n\r\n    return(\r\n        <div className='Hoco'>\r\n            <h2 className='bigBoy'>Big on Potassium</h2>\r\n            <img src=\"https://images.agoramedia.com/everydayhealth/gcms/All-About-Bananas-Nutrition-Facts-Health-Benefits-Recipes-and-More-RM-722x406.jpg\" alt=\"\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Bananas","import React from 'react'\r\n\r\nconst Kiwis = () => {\r\n\r\n\r\n    return(\r\n        <div className='toyota'>\r\n            <h2>Hey, eat a kiwi</h2>\r\n            <img src=\"https://draxe.com/wp-content/uploads/2016/02/KiwiNutritionHeader.jpg\" alt=\"\" />\r\n            <ul>\r\n                <li>Will Never Leave Cheesecake Factory Hill</li>\r\n                <li>Eats Dirt Hill</li>\r\n                <li>Edges Hill</li>\r\n                <li>Unicorn Hill</li>\r\n                <li>Has One On Speed Dial Hill</li>\r\n                <li>Y'all Ugly Hill</li>\r\n                <li>Throw That [@, $, $] In An Array Hill</li>\r\n                <li>Bread Boi Hill</li>\r\n        \r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Kiwis","import React from 'react'\r\n\r\nconst Oranges = (props) => {\r\n    return (\r\n        <div className=\"bonkers\">\r\n            <h2>Oranges prevents scurvy</h2>\r\n            <img src=\"https://www.welcometothetable.coop/sites/default/files/wp-content/uploads/2016/02/Oranges.jpg\" alt=\"\" />\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Oranges","import React, {Component} from 'react';\nimport { BrowserRouter, Route, Link, Switch} from 'react-router-dom'\nimport Navbar from './components/Navbar'\nimport Bananas from './components/Bananas'\nimport Kiwis from './components/Kiwis'\nimport Oranges from './components/Oranges'\n\n\nclass App extends Component {\n  render() {\n  return (\n    <BrowserRouter>\n    <div className=\"App\" >\n      <Navbar />\n     <Switch>\n       <Route path='/Bananas' component={Bananas} />\n       <Route path='/Kiwis' component={Kiwis} />\n       <Route path='/Oranges' component={Oranges} />\n     </Switch>\n    </div>\n    </BrowserRouter>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}